
Digital Security System using EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800100  00800100  00000da2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ac1  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000286  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000075d  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000350  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ef7  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00004ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 30       	cpi	r26, 0x00	; 0
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 32       	cpi	r26, 0x29	; 41
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  8a:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmnd>:
#define LCD_RW 1
#define LCD_EN 2

void LCD_cmnd(unsigned char cmnd)
{
	LCD_DATAPORT=cmnd;
  92:	8b bb       	out	0x1b, r24	; 27
	LCD_CMNDPORT &= ~(1<<LCD_RS);
  94:	c0 98       	cbi	0x18, 0	; 24
	LCD_CMNDPORT &= ~(1<<LCD_RW);
  96:	c1 98       	cbi	0x18, 1	; 24
	LCD_CMNDPORT |= (1<<LCD_EN);
  98:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_cmnd+0xa>
  a0:	00 00       	nop
	_delay_us(1);
	LCD_CMNDPORT &= ~(1<<LCD_EN);
  a2:	c2 98       	cbi	0x18, 2	; 24
  a4:	8f e8       	ldi	r24, 0x8F	; 143
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_cmnd+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_cmnd+0x1c>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <LCD_data>:
	_delay_us(100);
}
void LCD_data(unsigned char data)
{
	LCD_DATAPORT = data;
  b2:	8b bb       	out	0x1b, r24	; 27
	LCD_CMNDPORT |= (1<<LCD_RS);
  b4:	c0 9a       	sbi	0x18, 0	; 24
	LCD_CMNDPORT &= ~(1<<LCD_RW);
  b6:	c1 98       	cbi	0x18, 1	; 24
	LCD_CMNDPORT |= (1<<LCD_EN);
  b8:	c2 9a       	sbi	0x18, 2	; 24
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_data+0xa>
  c0:	00 00       	nop
	_delay_us(1);
	LCD_CMNDPORT &= ~(1<<LCD_EN);
  c2:	c2 98       	cbi	0x18, 2	; 24
  c4:	8f e8       	ldi	r24, 0x8F	; 143
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_data+0x16>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_data+0x1c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_initialize>:
	_delay_us(100);
}
void LCD_initialize(void)
{
	DDRA = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d6:	87 bb       	out	0x17, r24	; 23
	LCD_CMNDPORT &= ~(1<<LCD_EN);
  d8:	c2 98       	cbi	0x18, 2	; 24
	LCD_cmnd(0x38);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_initialize+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_initialize+0x18>
  ea:	00 00       	nop
	_delay_us(1000);
	LCD_cmnd(0x0E);
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_initialize+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_initialize+0x2a>
  fc:	00 00       	nop
	_delay_us(1000);
	LCD_cmnd(0x01);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_initialize+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_initialize+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_clear>:
	_delay_us(1000);	
}
void LCD_clear(void)
{
	LCD_cmnd(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_clear+0xa>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_clear+0x10>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <LCD_print>:
	_delay_us(1000);
}
void LCD_print(char * str)
{
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	unsigned char i=0;
	while(str[i] != 0)
 12e:	88 81       	ld	r24, Y
 130:	88 23       	and	r24, r24
 132:	81 f0       	breq	.+32     	; 0x154 <LCD_print+0x2e>
	LCD_cmnd(0x01);
	_delay_us(1000);
}
void LCD_print(char * str)
{
	unsigned char i=0;
 134:	10 e0       	ldi	r17, 0x00	; 0
	while(str[i] != 0)
	{
		LCD_data(str[i]);
 136:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
		i++;
 13a:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_print+0x1a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_print+0x20>
 146:	00 00       	nop
	_delay_us(1000);
}
void LCD_print(char * str)
{
	unsigned char i=0;
	while(str[i] != 0)
 148:	fe 01       	movw	r30, r28
 14a:	e1 0f       	add	r30, r17
 14c:	f1 1d       	adc	r31, r1
 14e:	80 81       	ld	r24, Z
 150:	81 11       	cpse	r24, r1
 152:	f1 cf       	rjmp	.-30     	; 0x136 <LCD_print+0x10>
	{
		LCD_data(str[i]);
		i++;
		_delay_ms(1);
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	08 95       	ret

0000015c <LCD_set_curser>:
void LCD_set_curser(unsigned char y, unsigned char x)
{
	if(y==1)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	29 f4       	brne	.+10     	; 0x16a <LCD_set_curser+0xe>
	LCD_cmnd(0x7F+x);
 160:	86 2f       	mov	r24, r22
 162:	81 58       	subi	r24, 0x81	; 129
 164:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 168:	08 95       	ret
	else if(y==2)
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	21 f4       	brne	.+8      	; 0x176 <LCD_set_curser+0x1a>
	LCD_cmnd(0xBF+x);
 16e:	86 2f       	mov	r24, r22
 170:	81 54       	subi	r24, 0x41	; 65
 172:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 176:	08 95       	ret

00000178 <port_initialize>:
unsigned char eeprom_data_b;
int main();

void port_initialize()
{
	KEY_PAD_DDR = 0x0F;		//Key-board port, higer nibble - input, lower nibble - output
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	84 bb       	out	0x14, r24	; 20
	KEY_PAD_ROW = 0xFF;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	85 bb       	out	0x15, r24	; 21
	MOTOR_DDR=0xFF;
 180:	81 bb       	out	0x11, r24	; 17
 182:	08 95       	ret

00000184 <buzzer>:
}
void buzzer()
{
	PORTB|=0x10;
 184:	c4 9a       	sbi	0x18, 4	; 24
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	81 ee       	ldi	r24, 0xE1	; 225
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <buzzer+0x8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <buzzer+0x12>
 196:	00 00       	nop
	_delay_ms(100);
	PORTB&=0x07;
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	87 70       	andi	r24, 0x07	; 7
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	08 95       	ret

000001a0 <led_blink>:
}
void led_blink(unsigned char n)
{
	unsigned char i;
	for(i=0;i<n;i++)
 1a0:	88 23       	and	r24, r24
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <led_blink+0x3c>
 1a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTB|=0x30;
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	20 63       	ori	r18, 0x30	; 48
 1aa:	28 bb       	out	0x18, r18	; 24
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	32 e5       	ldi	r19, 0x52	; 82
 1b0:	47 e0       	ldi	r20, 0x07	; 7
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	30 40       	sbci	r19, 0x00	; 0
 1b6:	40 40       	sbci	r20, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <led_blink+0x12>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <led_blink+0x1c>
 1bc:	00 00       	nop
		_delay_ms(150);
		PORTB&=0x07;
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	27 70       	andi	r18, 0x07	; 7
 1c2:	28 bb       	out	0x18, r18	; 24
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	32 e5       	ldi	r19, 0x52	; 82
 1c8:	47 e0       	ldi	r20, 0x07	; 7
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	30 40       	sbci	r19, 0x00	; 0
 1ce:	40 40       	sbci	r20, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <led_blink+0x2a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <led_blink+0x34>
 1d4:	00 00       	nop
	PORTB&=0x07;
}
void led_blink(unsigned char n)
{
	unsigned char i;
	for(i=0;i<n;i++)
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	98 13       	cpse	r25, r24
 1da:	e5 cf       	rjmp	.-54     	; 0x1a6 <led_blink+0x6>
 1dc:	08 95       	ret

000001de <dc_motor_forward>:
		_delay_ms(150);
	}
}
void dc_motor_forward()
{
	MOTOR=0x10;
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	8b e7       	ldi	r24, 0x7B	; 123
 1e6:	92 e9       	ldi	r25, 0x92	; 146
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <dc_motor_forward+0xa>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <dc_motor_forward+0x14>
 1f2:	00 00       	nop
	_delay_ms(3000);
	MOTOR=0x00;
 1f4:	12 ba       	out	0x12, r1	; 18
 1f6:	08 95       	ret

000001f8 <dc_motor_backward>:
}
void dc_motor_backward()
{
	MOTOR=0x20;
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	8b e7       	ldi	r24, 0x7B	; 123
 200:	92 e9       	ldi	r25, 0x92	; 146
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <dc_motor_backward+0xa>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <dc_motor_backward+0x14>
 20c:	00 00       	nop
	_delay_ms(3000);
	MOTOR=0x00;
 20e:	12 ba       	out	0x12, r1	; 18
 210:	08 95       	ret

00000212 <stepper_clockwise>:
}
void stepper_clockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
 212:	88 23       	and	r24, r24
 214:	81 f1       	breq	.+96     	; 0x276 <stepper_clockwise+0x64>
 216:	90 e0       	ldi	r25, 0x00	; 0
	{
	MOTOR=0x08;
 218:	58 e0       	ldi	r21, 0x08	; 8
	_delay_ms(50);
	MOTOR=0x04;
 21a:	44 e0       	ldi	r20, 0x04	; 4
	_delay_ms(50);
	MOTOR=0x02;
 21c:	32 e0       	ldi	r19, 0x02	; 2
	_delay_ms(50);
	MOTOR=0x01;
 21e:	21 e0       	ldi	r18, 0x01	; 1
void stepper_clockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
	{
	MOTOR=0x08;
 220:	52 bb       	out	0x12, r21	; 18
 222:	6f ef       	ldi	r22, 0xFF	; 255
 224:	70 e7       	ldi	r23, 0x70	; 112
 226:	e2 e0       	ldi	r30, 0x02	; 2
 228:	61 50       	subi	r22, 0x01	; 1
 22a:	70 40       	sbci	r23, 0x00	; 0
 22c:	e0 40       	sbci	r30, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <stepper_clockwise+0x16>
 230:	00 c0       	rjmp	.+0      	; 0x232 <stepper_clockwise+0x20>
 232:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x04;
 234:	42 bb       	out	0x12, r20	; 18
 236:	6f ef       	ldi	r22, 0xFF	; 255
 238:	70 e7       	ldi	r23, 0x70	; 112
 23a:	e2 e0       	ldi	r30, 0x02	; 2
 23c:	61 50       	subi	r22, 0x01	; 1
 23e:	70 40       	sbci	r23, 0x00	; 0
 240:	e0 40       	sbci	r30, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <stepper_clockwise+0x2a>
 244:	00 c0       	rjmp	.+0      	; 0x246 <stepper_clockwise+0x34>
 246:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x02;
 248:	32 bb       	out	0x12, r19	; 18
 24a:	6f ef       	ldi	r22, 0xFF	; 255
 24c:	70 e7       	ldi	r23, 0x70	; 112
 24e:	e2 e0       	ldi	r30, 0x02	; 2
 250:	61 50       	subi	r22, 0x01	; 1
 252:	70 40       	sbci	r23, 0x00	; 0
 254:	e0 40       	sbci	r30, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <stepper_clockwise+0x3e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <stepper_clockwise+0x48>
 25a:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x01;
 25c:	22 bb       	out	0x12, r18	; 18
 25e:	6f ef       	ldi	r22, 0xFF	; 255
 260:	70 e7       	ldi	r23, 0x70	; 112
 262:	e2 e0       	ldi	r30, 0x02	; 2
 264:	61 50       	subi	r22, 0x01	; 1
 266:	70 40       	sbci	r23, 0x00	; 0
 268:	e0 40       	sbci	r30, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <stepper_clockwise+0x52>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <stepper_clockwise+0x5c>
 26e:	00 00       	nop
	MOTOR=0x00;
}
void stepper_clockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
 270:	9f 5f       	subi	r25, 0xFF	; 255
 272:	98 13       	cpse	r25, r24
 274:	d5 cf       	rjmp	.-86     	; 0x220 <stepper_clockwise+0xe>
 276:	08 95       	ret

00000278 <stepper_anticlockwise>:
	}
}
void stepper_anticlockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
 278:	88 23       	and	r24, r24
 27a:	79 f1       	breq	.+94     	; 0x2da <stepper_anticlockwise+0x62>
 27c:	90 e0       	ldi	r25, 0x00	; 0
	{
	MOTOR=0x03;
 27e:	43 e0       	ldi	r20, 0x03	; 3
	_delay_ms(50);
	MOTOR=0x00;
	_delay_ms(50);
	MOTOR=0x04;
 280:	34 e0       	ldi	r19, 0x04	; 4
	_delay_ms(50);
	MOTOR=0x02;
 282:	22 e0       	ldi	r18, 0x02	; 2
void stepper_anticlockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
	{
	MOTOR=0x03;
 284:	42 bb       	out	0x12, r20	; 18
 286:	5f ef       	ldi	r21, 0xFF	; 255
 288:	60 e7       	ldi	r22, 0x70	; 112
 28a:	72 e0       	ldi	r23, 0x02	; 2
 28c:	51 50       	subi	r21, 0x01	; 1
 28e:	60 40       	sbci	r22, 0x00	; 0
 290:	70 40       	sbci	r23, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <stepper_anticlockwise+0x14>
 294:	00 c0       	rjmp	.+0      	; 0x296 <stepper_anticlockwise+0x1e>
 296:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x00;
 298:	12 ba       	out	0x12, r1	; 18
 29a:	5f ef       	ldi	r21, 0xFF	; 255
 29c:	60 e7       	ldi	r22, 0x70	; 112
 29e:	72 e0       	ldi	r23, 0x02	; 2
 2a0:	51 50       	subi	r21, 0x01	; 1
 2a2:	60 40       	sbci	r22, 0x00	; 0
 2a4:	70 40       	sbci	r23, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <stepper_anticlockwise+0x28>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <stepper_anticlockwise+0x32>
 2aa:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x04;
 2ac:	32 bb       	out	0x12, r19	; 18
 2ae:	5f ef       	ldi	r21, 0xFF	; 255
 2b0:	60 e7       	ldi	r22, 0x70	; 112
 2b2:	72 e0       	ldi	r23, 0x02	; 2
 2b4:	51 50       	subi	r21, 0x01	; 1
 2b6:	60 40       	sbci	r22, 0x00	; 0
 2b8:	70 40       	sbci	r23, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <stepper_anticlockwise+0x3c>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <stepper_anticlockwise+0x46>
 2be:	00 00       	nop
	_delay_ms(50);
	MOTOR=0x02;
 2c0:	22 bb       	out	0x12, r18	; 18
 2c2:	5f ef       	ldi	r21, 0xFF	; 255
 2c4:	60 e7       	ldi	r22, 0x70	; 112
 2c6:	72 e0       	ldi	r23, 0x02	; 2
 2c8:	51 50       	subi	r21, 0x01	; 1
 2ca:	60 40       	sbci	r22, 0x00	; 0
 2cc:	70 40       	sbci	r23, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <stepper_anticlockwise+0x50>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <stepper_anticlockwise+0x5a>
 2d2:	00 00       	nop
	}
}
void stepper_anticlockwise(unsigned char fanko)
{
	unsigned char i;
	for(i=0;i<fanko;i++)
 2d4:	9f 5f       	subi	r25, 0xFF	; 255
 2d6:	98 13       	cpse	r25, r24
 2d8:	d5 cf       	rjmp	.-86     	; 0x284 <stepper_anticlockwise+0xc>
 2da:	08 95       	ret

000002dc <write_eeprom_data_a>:
	_delay_ms(50);
	}
}
void write_eeprom_data_a(unsigned char value_a)
{
	EEAR=0x50;
 2dc:	20 e5       	ldi	r18, 0x50	; 80
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	3f bb       	out	0x1f, r19	; 31
 2e2:	2e bb       	out	0x1e, r18	; 30
	while(EECR&(1<<EEWE));
 2e4:	e1 99       	sbic	0x1c, 1	; 28
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <write_eeprom_data_a+0x8>
	EEDR=value_a;
 2e8:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEMWE);
 2ea:	e2 9a       	sbi	0x1c, 2	; 28
	EECR|=(1<<EEWE);
 2ec:	e1 9a       	sbi	0x1c, 1	; 28
 2ee:	08 95       	ret

000002f0 <write_eeprom_data_b>:
}
void write_eeprom_data_b(unsigned char value_b)
{	
	EEAR=0x51;
 2f0:	21 e5       	ldi	r18, 0x51	; 81
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	3f bb       	out	0x1f, r19	; 31
 2f6:	2e bb       	out	0x1e, r18	; 30
	while(EECR&(1<<EEWE));
 2f8:	e1 99       	sbic	0x1c, 1	; 28
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <write_eeprom_data_b+0x8>
	EEDR=value_b;
 2fc:	8d bb       	out	0x1d, r24	; 29
	EECR|=(1<<EEMWE);
 2fe:	e2 9a       	sbi	0x1c, 2	; 28
	EECR|=(1<<EEWE);
 300:	e1 9a       	sbi	0x1c, 1	; 28
 302:	08 95       	ret

00000304 <read_eeprom_data_a>:
		write_eeprom_data_b(i);
	}
}*/
void read_eeprom_data_a()
{
	EEAR=0x50;
 304:	80 e5       	ldi	r24, 0x50	; 80
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9f bb       	out	0x1f, r25	; 31
 30a:	8e bb       	out	0x1e, r24	; 30
	while(EECR&(1<<EEWE));
 30c:	e1 99       	sbic	0x1c, 1	; 28
 30e:	fe cf       	rjmp	.-4      	; 0x30c <read_eeprom_data_a+0x8>
	EECR|=(1<<EERE);
 310:	e0 9a       	sbi	0x1c, 0	; 28
	eeprom_data_a=EEDR;
 312:	8d b3       	in	r24, 0x1d	; 29
 314:	80 93 00 01 	sts	0x0100, r24
 318:	08 95       	ret

0000031a <read_eeprom_data_b>:
}
void read_eeprom_data_b()
{
	EEAR=0x51;
 31a:	81 e5       	ldi	r24, 0x51	; 81
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	9f bb       	out	0x1f, r25	; 31
 320:	8e bb       	out	0x1e, r24	; 30
	while(EECR&(1<<EEWE));
 322:	e1 99       	sbic	0x1c, 1	; 28
 324:	fe cf       	rjmp	.-4      	; 0x322 <read_eeprom_data_b+0x8>
	EECR|=(1<<EERE);
 326:	e0 9a       	sbi	0x1c, 0	; 28
	eeprom_data_b=EEDR;
 328:	8d b3       	in	r24, 0x1d	; 29
 32a:	80 93 05 01 	sts	0x0105, r24
 32e:	08 95       	ret

00000330 <read_eeprom>:
}
void read_eeprom()
{ 
	unsigned char i=0;
	for(i=0;i<=eeprom_data_b;i++)
 330:	20 e0       	ldi	r18, 0x00	; 0
	{		
		EEAR=i+0x00;
 332:	82 2f       	mov	r24, r18
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	9f bb       	out	0x1f, r25	; 31
 338:	8e bb       	out	0x1e, r24	; 30
		while(EECR&(1<<EEWE));
 33a:	e1 99       	sbic	0x1c, 1	; 28
 33c:	fe cf       	rjmp	.-4      	; 0x33a <read_eeprom+0xa>
		EECR|=(1<<EERE);
 33e:	e0 9a       	sbi	0x1c, 0	; 28
		set_password[i]=EEDR;
 340:	8d b3       	in	r24, 0x1d	; 29
 342:	e2 2f       	mov	r30, r18
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e9 5f       	subi	r30, 0xF9	; 249
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	80 83       	st	Z, r24
	eeprom_data_b=EEDR;
}
void read_eeprom()
{ 
	unsigned char i=0;
	for(i=0;i<=eeprom_data_b;i++)
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	80 91 05 01 	lds	r24, 0x0105
 352:	82 17       	cp	r24, r18
 354:	70 f7       	brcc	.-36     	; 0x332 <read_eeprom+0x2>
		EEAR=i+0x00;
		while(EECR&(1<<EEWE));
		EECR|=(1<<EERE);
		set_password[i]=EEDR;
	}
}
 356:	08 95       	ret

00000358 <main>:
	}
}
int main()
{	
	unsigned char a,b,i;
	port_initialize();
 358:	0e 94 bc 00 	call	0x178	; 0x178 <port_initialize>
	LCD_initialize();
 35c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_initialize>
	LCD_cmnd(0x38);
 360:	88 e3       	ldi	r24, 0x38	; 56
 362:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	89 ef       	ldi	r24, 0xF9	; 249
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x14>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x1e>
 376:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	89 ef       	ldi	r24, 0xF9	; 249
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x2c>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x36>
 38e:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0C);
 390:	8c e0       	ldi	r24, 0x0C	; 12
 392:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
	//_delay_ms(2000);
	//save_password();
	if(first_time==0) 
 396:	80 91 03 01 	lds	r24, 0x0103
 39a:	81 11       	cpse	r24, r1
 39c:	57 c0       	rjmp	.+174    	; 0x44c <main+0xf4>
	{
		LCD_cmnd(0x0C);
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
		LCD_set_curser(1,4);
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
		LCD_print("WELCOME!!!");
 3ac:	81 e6       	ldi	r24, 0x61	; 97
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	83 ed       	ldi	r24, 0xD3	; 211
 3b8:	90 e3       	ldi	r25, 0x30	; 48
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x62>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x6c>
 3c4:	00 00       	nop
		LCD_print("Please Wait.....");
		_delay_ms(3000);*/
		//write_eeprom_data_a(0);
		//write_eeprom_data_b(0);
		//write_eeprom();
		read_eeprom_data_b();
 3c6:	0e 94 8d 01 	call	0x31a	; 0x31a <read_eeprom_data_b>
		read_eeprom_data_a();
 3ca:	0e 94 82 01 	call	0x304	; 0x304 <read_eeprom_data_a>
		read_eeprom();
 3ce:	0e 94 98 01 	call	0x330	; 0x330 <read_eeprom>
		LCD_clear();
 3d2:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
		LCD_print("Saved data is:");
 3d6:	8c e6       	ldi	r24, 0x6C	; 108
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
		LCD_clear();
 3de:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
		LCD_print("b=");
 3e2:	8b e7       	ldi	r24, 0x7B	; 123
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
		LCD_data(0x30+eeprom_data_b);
 3ea:	80 91 05 01 	lds	r24, 0x0105
 3ee:	80 5d       	subi	r24, 0xD0	; 208
 3f0:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
		LCD_print(" a=");
 3f4:	8e e7       	ldi	r24, 0x7E	; 126
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
		LCD_data(0x30+eeprom_data_a);
 3fc:	80 91 00 01 	lds	r24, 0x0100
 400:	80 5d       	subi	r24, 0xD0	; 208
 402:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	83 ed       	ldi	r24, 0xD3	; 211
 40a:	90 e3       	ldi	r25, 0x30	; 48
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0xb4>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0xbe>
 416:	00 00       	nop
		_delay_ms(1000);
		for(i=0;i<eeprom_data_b;i++)
 418:	80 91 05 01 	lds	r24, 0x0105
 41c:	88 23       	and	r24, r24
 41e:	69 f0       	breq	.+26     	; 0x43a <main+0xe2>
 420:	c0 e0       	ldi	r28, 0x00	; 0
		{
			b=set_password[i];
 422:	ec 2f       	mov	r30, r28
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	e9 5f       	subi	r30, 0xF9	; 249
 428:	fe 4f       	sbci	r31, 0xFE	; 254
			LCD_data(b);
 42a:	80 81       	ld	r24, Z
 42c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
		LCD_print("b=");
		LCD_data(0x30+eeprom_data_b);
		LCD_print(" a=");
		LCD_data(0x30+eeprom_data_a);
		_delay_ms(1000);
		for(i=0;i<eeprom_data_b;i++)
 430:	cf 5f       	subi	r28, 0xFF	; 255
 432:	80 91 05 01 	lds	r24, 0x0105
 436:	c8 17       	cp	r28, r24
 438:	a0 f3       	brcs	.-24     	; 0x422 <main+0xca>
 43a:	2f ef       	ldi	r18, 0xFF	; 255
 43c:	83 ed       	ldi	r24, 0xD3	; 211
 43e:	90 e3       	ldi	r25, 0x30	; 48
 440:	21 50       	subi	r18, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <main+0xe8>
 448:	00 c0       	rjmp	.+0      	; 0x44a <main+0xf2>
 44a:	00 00       	nop
			b=set_password[i];
			LCD_data(b);
		}
		_delay_ms(1000);
	}
	first_time=1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 03 01 	sts	0x0103, r24
	keyPressed_count=0;
 452:	10 92 17 01 	sts	0x0117, r1
	if(chage_password_value==4) goto change_password;
 456:	80 91 06 01 	lds	r24, 0x0106
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	09 f4       	brne	.+2      	; 0x460 <__stack+0x1>
 45e:	7b c0       	rjmp	.+246    	; 0x556 <__stack+0xf7>
	if(chage_password_value==5) goto set_next_password;
 460:	85 30       	cpi	r24, 0x05	; 5
 462:	49 f0       	breq	.+18     	; 0x476 <__stack+0x17>
	if(eeprom_data_a==0)
 464:	80 91 00 01 	lds	r24, 0x0100
 468:	81 11       	cpse	r24, r1
 46a:	75 c0       	rjmp	.+234    	; 0x556 <__stack+0xf7>
	{
		write_eeprom_data_a(1);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <write_eeprom_data_a>
		read_eeprom_data_a();
 472:	0e 94 82 01 	call	0x304	; 0x304 <read_eeprom_data_a>
		set_next_password:
		chage_password_value=0;
 476:	10 92 06 01 	sts	0x0106, r1
		abc=0;
 47a:	10 92 02 01 	sts	0x0102, r1
		LCD_clear();
 47e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
		LCD_cmnd(0x80);
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
		LCD_print("Set Password:");
 488:	82 e8       	ldi	r24, 0x82	; 130
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	83 ec       	ldi	r24, 0xC3	; 195
 494:	99 e0       	ldi	r25, 0x09	; 9
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__stack+0x37>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__stack+0x41>
 4a0:	00 00       	nop
		_delay_ms(200);
		LCD_set_curser(2,1);
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
		KEY_PAD_DDR=0x0F;
 4aa:	8f e0       	ldi	r24, 0x0F	; 15
 4ac:	84 bb       	out	0x14, r24	; 20
		KEY_PAD_ROW=0xFF;
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	85 bb       	out	0x15, r24	; 21
		do
		{
			input();
 4b2:	0e 94 9c 03 	call	0x738	; 0x738 <input>
		}while(OK==1);
 4b6:	80 91 60 00 	lds	r24, 0x0060
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	d1 f3       	breq	.-12     	; 0x4b2 <__stack+0x53>
		n=keyPressed_count;
 4be:	80 91 17 01 	lds	r24, 0x0117
 4c2:	80 93 01 01 	sts	0x0101, r24
		OK=2;
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	80 93 60 00 	sts	0x0060, r24
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	81 ee       	ldi	r24, 0xE1	; 225
 4d0:	94 e0       	ldi	r25, 0x04	; 4
 4d2:	21 50       	subi	r18, 0x01	; 1
 4d4:	80 40       	sbci	r24, 0x00	; 0
 4d6:	90 40       	sbci	r25, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__stack+0x73>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__stack+0x7d>
 4dc:	00 00       	nop
		_delay_ms(100);
		LCD_clear();
 4de:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
		LCD_print("Ur Password is:");
 4e2:	80 e9       	ldi	r24, 0x90	; 144
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
		LCD_set_curser(2,1);
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
		write_eeprom_data_b(0);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <write_eeprom_data_b>
		read_eeprom_data_b();
 4f8:	0e 94 8d 01 	call	0x31a	; 0x31a <read_eeprom_data_b>
		for(i=0;i<n;i++)
 4fc:	80 91 01 01 	lds	r24, 0x0101
 500:	88 23       	and	r24, r24
 502:	01 f1       	breq	.+64     	; 0x544 <__stack+0xe5>
 504:	10 e0       	ldi	r17, 0x00	; 0
		{
			EEAR=i+0x00;
 506:	21 2f       	mov	r18, r17
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	3f bb       	out	0x1f, r19	; 31
 50c:	2e bb       	out	0x1e, r18	; 30
			while(EECR&(1<<EEWE));
 50e:	e1 99       	sbic	0x1c, 1	; 28
 510:	fe cf       	rjmp	.-4      	; 0x50e <__stack+0xaf>
			set_password[i]=EEDR=entered_password[i];
 512:	c1 2f       	mov	r28, r17
 514:	d0 e0       	ldi	r29, 0x00	; 0
 516:	fe 01       	movw	r30, r28
 518:	e8 5e       	subi	r30, 0xE8	; 232
 51a:	fe 4f       	sbci	r31, 0xFE	; 254
 51c:	80 81       	ld	r24, Z
 51e:	8d bb       	out	0x1d, r24	; 29
 520:	c9 5f       	subi	r28, 0xF9	; 249
 522:	de 4f       	sbci	r29, 0xFE	; 254
 524:	88 83       	st	Y, r24
			EECR|=(1<<EEMWE);
 526:	e2 9a       	sbi	0x1c, 2	; 28
			EECR|=(1<<EEWE);
 528:	e1 9a       	sbi	0x1c, 1	; 28
			write_eeprom_data_b(i+1);
 52a:	1f 5f       	subi	r17, 0xFF	; 255
 52c:	81 2f       	mov	r24, r17
 52e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <write_eeprom_data_b>
			read_eeprom_data_b();
 532:	0e 94 8d 01 	call	0x31a	; 0x31a <read_eeprom_data_b>
			a=set_password[i];
			LCD_data(a);
 536:	88 81       	ld	r24, Y
 538:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
		LCD_clear();
		LCD_print("Ur Password is:");
		LCD_set_curser(2,1);
		write_eeprom_data_b(0);
		read_eeprom_data_b();
		for(i=0;i<n;i++)
 53c:	80 91 01 01 	lds	r24, 0x0101
 540:	18 17       	cp	r17, r24
 542:	08 f3       	brcs	.-62     	; 0x506 <__stack+0xa7>
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	87 ea       	ldi	r24, 0xA7	; 167
 548:	91 e6       	ldi	r25, 0x61	; 97
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__stack+0xeb>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__stack+0xf5>
 554:	00 00       	nop
			LCD_data(a);
		}
		_delay_ms(2000);
	}
	change_password:
	skip_compare=8;
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	80 93 28 01 	sts	0x0128, r24
	keyPressed_count=0;
 55c:	10 92 17 01 	sts	0x0117, r1
	LCD_clear();
 560:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
	LCD_print("Enter Password:");
 564:	80 ea       	ldi	r24, 0xA0	; 160
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
	LCD_set_curser(2,1);
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
	KEY_PAD_ROW=0xFF;
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
		abc=1;
 578:	c1 e0       	ldi	r28, 0x01	; 1
 57a:	c0 93 02 01 	sts	0x0102, r28
		input();
 57e:	0e 94 9c 03 	call	0x738	; 0x738 <input>
 582:	fb cf       	rjmp	.-10     	; 0x57a <__stack+0x11b>

00000584 <compare_password>:
		EECR|=(1<<EERE);
		set_password[i]=EEDR;
	}
}
void compare_password()
{
 584:	cf 93       	push	r28
	if(skip_compare==8)
 586:	80 91 28 01 	lds	r24, 0x0128
 58a:	88 30       	cpi	r24, 0x08	; 8
 58c:	09 f0       	breq	.+2      	; 0x590 <compare_password+0xc>
 58e:	d2 c0       	rjmp	.+420    	; 0x734 <compare_password+0x1b0>
	{
		unsigned char i,j,k;
		j=0;
		if(keyPressed_count==eeprom_data_b)
 590:	80 91 17 01 	lds	r24, 0x0117
 594:	90 91 05 01 	lds	r25, 0x0105
 598:	89 13       	cpse	r24, r25
 59a:	cc c0       	rjmp	.+408    	; 0x734 <compare_password+0x1b0>
		{
			for(i=0;i<eeprom_data_b;i++)
 59c:	88 23       	and	r24, r24
 59e:	91 f0       	breq	.+36     	; 0x5c4 <compare_password+0x40>
 5a0:	e7 e0       	ldi	r30, 0x07	; 7
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	a8 e1       	ldi	r26, 0x18	; 24
 5a6:	b1 e0       	ldi	r27, 0x01	; 1
		while(EECR&(1<<EEWE));
		EECR|=(1<<EERE);
		set_password[i]=EEDR;
	}
}
void compare_password()
 5a8:	81 50       	subi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	88 5f       	subi	r24, 0xF8	; 248
 5ae:	9e 4f       	sbci	r25, 0xFE	; 254
 5b0:	40 e0       	ldi	r20, 0x00	; 0
		j=0;
		if(keyPressed_count==eeprom_data_b)
		{
			for(i=0;i<eeprom_data_b;i++)
			{
				if(set_password[i]==entered_password[i])
 5b2:	31 91       	ld	r19, Z+
 5b4:	2d 91       	ld	r18, X+
 5b6:	32 13       	cpse	r19, r18
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <compare_password+0x38>
				j++;
 5ba:	4f 5f       	subi	r20, 0xFF	; 255
	{
		unsigned char i,j,k;
		j=0;
		if(keyPressed_count==eeprom_data_b)
		{
			for(i=0;i<eeprom_data_b;i++)
 5bc:	e8 17       	cp	r30, r24
 5be:	f9 07       	cpc	r31, r25
 5c0:	c1 f7       	brne	.-16     	; 0x5b2 <compare_password+0x2e>
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <compare_password+0x42>
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	81 ee       	ldi	r24, 0xE1	; 225
 5ca:	94 e0       	ldi	r25, 0x04	; 4
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <compare_password+0x48>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <compare_password+0x52>
 5d6:	00 00       	nop
			{
				if(set_password[i]==entered_password[i])
				j++;
			}
			_delay_ms(100);
			skip_compare=5;
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	80 93 28 01 	sts	0x0128, r24
			if(j==eeprom_data_b)
 5de:	80 91 05 01 	lds	r24, 0x0105
 5e2:	48 13       	cpse	r20, r24
 5e4:	82 c0       	rjmp	.+260    	; 0x6ea <compare_password+0x166>
			{
				chage_password_value++;
 5e6:	80 91 06 01 	lds	r24, 0x0106
 5ea:	8f 5f       	subi	r24, 0xFF	; 255
 5ec:	80 93 06 01 	sts	0x0106, r24
				if(chage_password_value==5) main();
 5f0:	85 30       	cpi	r24, 0x05	; 5
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <compare_password+0x74>
 5f4:	0e 94 ac 01 	call	0x358	; 0x358 <main>
				else
				{
					LCD_clear();
 5f8:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
					LCD_print("Unlocked!!!");
 5fc:	80 eb       	ldi	r24, 0xB0	; 176
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	83 ed       	ldi	r24, 0xD3	; 211
 608:	90 e3       	ldi	r25, 0x30	; 48
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <compare_password+0x86>
 612:	00 c0       	rjmp	.+0      	; 0x614 <compare_password+0x90>
 614:	00 00       	nop
					_delay_ms(1000);
					stepper_anticlockwise(2);
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 3c 01 	call	0x278	; 0x278 <stepper_anticlockwise>
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	87 ea       	ldi	r24, 0xA7	; 167
 620:	91 e6       	ldi	r25, 0x61	; 97
 622:	21 50       	subi	r18, 0x01	; 1
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	90 40       	sbci	r25, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <compare_password+0x9e>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <compare_password+0xa8>
 62c:	00 00       	nop
					_delay_ms(2000);
					dc_motor_backward();
 62e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <dc_motor_backward>
 632:	2f ef       	ldi	r18, 0xFF	; 255
 634:	83 ed       	ldi	r24, 0xD3	; 211
 636:	90 e3       	ldi	r25, 0x30	; 48
 638:	21 50       	subi	r18, 0x01	; 1
 63a:	80 40       	sbci	r24, 0x00	; 0
 63c:	90 40       	sbci	r25, 0x00	; 0
 63e:	e1 f7       	brne	.-8      	; 0x638 <compare_password+0xb4>
 640:	00 c0       	rjmp	.+0      	; 0x642 <compare_password+0xbe>
 642:	00 00       	nop
 644:	c3 e0       	ldi	r28, 0x03	; 3
					_delay_ms(1000);
					for(k=0;k<3;k++)
					{
						LCD_clear();
 646:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	87 e8       	ldi	r24, 0x87	; 135
 64e:	93 e1       	ldi	r25, 0x13	; 19
 650:	21 50       	subi	r18, 0x01	; 1
 652:	80 40       	sbci	r24, 0x00	; 0
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <compare_password+0xcc>
 658:	00 c0       	rjmp	.+0      	; 0x65a <compare_password+0xd6>
 65a:	00 00       	nop
						_delay_ms(400);
						LCD_set_curser(1,4);
 65c:	64 e0       	ldi	r22, 0x04	; 4
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
						LCD_print("WelCome!!!");
 664:	8c eb       	ldi	r24, 0xBC	; 188
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
						LCD_set_curser(2,4);
 66c:	64 e0       	ldi	r22, 0x04	; 4
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
						LCD_print("WelCome!!!");
 674:	8c eb       	ldi	r24, 0xBC	; 188
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	8b e4       	ldi	r24, 0x4B	; 75
 680:	9d e1       	ldi	r25, 0x1D	; 29
 682:	21 50       	subi	r18, 0x01	; 1
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	90 40       	sbci	r25, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <compare_password+0xfe>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <compare_password+0x108>
 68c:	00 00       	nop
 68e:	c1 50       	subi	r28, 0x01	; 1
					_delay_ms(1000);
					stepper_anticlockwise(2);
					_delay_ms(2000);
					dc_motor_backward();
					_delay_ms(1000);
					for(k=0;k<3;k++)
 690:	d1 f6       	brne	.-76     	; 0x646 <compare_password+0xc2>
 692:	2f ef       	ldi	r18, 0xFF	; 255
 694:	83 e2       	ldi	r24, 0x23	; 35
 696:	94 ef       	ldi	r25, 0xF4	; 244
 698:	21 50       	subi	r18, 0x01	; 1
 69a:	80 40       	sbci	r24, 0x00	; 0
 69c:	90 40       	sbci	r25, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <compare_password+0x114>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <compare_password+0x11e>
 6a2:	00 00       	nop
						LCD_set_curser(2,4);
						LCD_print("WelCome!!!");
						_delay_ms(600);
					}
					_delay_ms(5000);
					dc_motor_forward();
 6a4:	0e 94 ef 00 	call	0x1de	; 0x1de <dc_motor_forward>
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	83 ed       	ldi	r24, 0xD3	; 211
 6ac:	90 e3       	ldi	r25, 0x30	; 48
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	90 40       	sbci	r25, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <compare_password+0x12a>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <compare_password+0x134>
 6b8:	00 00       	nop
					_delay_ms(1000);
					stepper_clockwise(2);
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	0e 94 09 01 	call	0x212	; 0x212 <stepper_clockwise>
					LCD_clear();
 6c0:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
					LCD_set_curser(1,5);
 6c4:	65 e0       	ldi	r22, 0x05	; 5
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
					LCD_print("Locked!!!");
 6cc:	87 ec       	ldi	r24, 0xC7	; 199
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	83 ed       	ldi	r24, 0xD3	; 211
 6d8:	90 e3       	ldi	r25, 0x30	; 48
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <compare_password+0x156>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <compare_password+0x160>
 6e4:	00 00       	nop
					_delay_ms(1000);
					
				}
				main();
 6e6:	0e 94 ac 01 	call	0x358	; 0x358 <main>
			}
			else
			{
				LCD_clear();
 6ea:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
				LCD_print("INVALID Password");
 6ee:	81 ed       	ldi	r24, 0xD1	; 209
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	89 e6       	ldi	r24, 0x69	; 105
 6fa:	98 e1       	ldi	r25, 0x18	; 24
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	90 40       	sbci	r25, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <compare_password+0x178>
 704:	00 c0       	rjmp	.+0      	; 0x706 <compare_password+0x182>
 706:	00 00       	nop
				_delay_ms(500);
				led_blink(3);
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <led_blink>
				LCD_set_curser(2,3);
 70e:	63 e0       	ldi	r22, 0x03	; 3
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
				LCD_print("Try Again...");
 716:	82 ee       	ldi	r24, 0xE2	; 226
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	83 ed       	ldi	r24, 0xD3	; 211
 722:	90 e3       	ldi	r25, 0x30	; 48
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <compare_password+0x1a0>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <compare_password+0x1aa>
 72e:	00 00       	nop
				_delay_ms(1000);
				main();
 730:	0e 94 ac 01 	call	0x358	; 0x358 <main>
			}
		}
		else;
	}
	else;
}
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <input>:
void input()
{
 738:	2f 92       	push	r2
 73a:	3f 92       	push	r3
 73c:	4f 92       	push	r4
 73e:	5f 92       	push	r5
 740:	6f 92       	push	r6
 742:	7f 92       	push	r7
 744:	8f 92       	push	r8
 746:	9f 92       	push	r9
 748:	af 92       	push	r10
 74a:	bf 92       	push	r11
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i,column_value,keyCode,keyPressed=0;
	column_value = 0xFF;
	for(i=0; i<4; i++)
	{
		_delay_ms(1);
		KEY_PAD_ROW= ~(0x01 << i);
 75e:	22 24       	eor	r2, r2
 760:	23 94       	inc	r2
 762:	31 2c       	mov	r3, r1
					LCD_set_curser(1,7);
					LCD_print("OK");
					PORTB|=0x30;
					_delay_ms(300);
					PORTB&=0x07;
					OK=2;
 764:	68 94       	set
 766:	44 24       	eor	r4, r4
 768:	41 f8       	bld	r4, 1
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='C')
			{
				entered_password[keyPressed_count]='C';
 76a:	0f 2e       	mov	r0, r31
 76c:	f3 e4       	ldi	r31, 0x43	; 67
 76e:	5f 2e       	mov	r5, r31
 770:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='B')
			{
				entered_password[keyPressed_count]='B';
 772:	0f 2e       	mov	r0, r31
 774:	f2 e4       	ldi	r31, 0x42	; 66
 776:	6f 2e       	mov	r6, r31
 778:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='A')
			{
				entered_password[keyPressed_count]='A';
 77a:	0f 2e       	mov	r0, r31
 77c:	f1 e4       	ldi	r31, 0x41	; 65
 77e:	7f 2e       	mov	r7, r31
 780:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='0')
			{
				entered_password[keyPressed_count]='0';
 782:	0f 2e       	mov	r0, r31
 784:	f0 e3       	ldi	r31, 0x30	; 48
 786:	8f 2e       	mov	r8, r31
 788:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='9')
			{
				entered_password[keyPressed_count]='9';
 78a:	0f 2e       	mov	r0, r31
 78c:	f9 e3       	ldi	r31, 0x39	; 57
 78e:	9f 2e       	mov	r9, r31
 790:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='8')
			{
				entered_password[keyPressed_count]='8';
 792:	0f 2e       	mov	r0, r31
 794:	f8 e3       	ldi	r31, 0x38	; 56
 796:	af 2e       	mov	r10, r31
 798:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='7')
			{
				entered_password[keyPressed_count]='7';
 79a:	0f 2e       	mov	r0, r31
 79c:	f7 e3       	ldi	r31, 0x37	; 55
 79e:	bf 2e       	mov	r11, r31
 7a0:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='6')
			{
				entered_password[keyPressed_count]='6';
 7a2:	0f 2e       	mov	r0, r31
 7a4:	f6 e3       	ldi	r31, 0x36	; 54
 7a6:	cf 2e       	mov	r12, r31
 7a8:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='5')
			{
				entered_password[keyPressed_count]='5';
 7aa:	0f 2e       	mov	r0, r31
 7ac:	f5 e3       	ldi	r31, 0x35	; 53
 7ae:	df 2e       	mov	r13, r31
 7b0:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='4')
			{
				entered_password[keyPressed_count]='4';
 7b2:	0f 2e       	mov	r0, r31
 7b4:	f4 e3       	ldi	r31, 0x34	; 52
 7b6:	ef 2e       	mov	r14, r31
 7b8:	f0 2d       	mov	r31, r0
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='3')
			{
				entered_password[keyPressed_count]='3';
 7ba:	0f 2e       	mov	r0, r31
 7bc:	f3 e3       	ldi	r31, 0x33	; 51
 7be:	ff 2e       	mov	r15, r31
 7c0:	f0 2d       	mov	r31, r0
 7c2:	8f e9       	ldi	r24, 0x9F	; 159
 7c4:	9f e0       	ldi	r25, 0x0F	; 15
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <input+0x8e>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <input+0x94>
 7cc:	00 00       	nop
	unsigned char i,column_value,keyCode,keyPressed=0;
	column_value = 0xFF;
	for(i=0; i<4; i++)
	{
		_delay_ms(1);
		KEY_PAD_ROW= ~(0x01 << i);
 7ce:	91 01       	movw	r18, r2
 7d0:	0c 2e       	mov	r0, r28
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <input+0xa0>
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	0a 94       	dec	r0
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <input+0x9c>
 7dc:	82 2f       	mov	r24, r18
 7de:	80 95       	com	r24
 7e0:	85 bb       	out	0x15, r24	; 21
 7e2:	8f e9       	ldi	r24, 0x9F	; 159
 7e4:	9f e0       	ldi	r25, 0x0F	; 15
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <input+0xae>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <input+0xb4>
 7ec:	00 00       	nop
		_delay_ms(1);  		  	 		  //delay for port o/p settling
		column_value = KEY_PAD_COLUMN | 0x0F;
 7ee:	83 b3       	in	r24, 0x13	; 19
 7f0:	8f 60       	ori	r24, 0x0F	; 15
		
		if (column_value != 0xFF)
 7f2:	8f 3f       	cpi	r24, 0xFF	; 255
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <input+0xc0>
 7f6:	1d c2       	rjmp	.+1082   	; 0xc32 <input+0x4fa>
 7f8:	9f ef       	ldi	r25, 0xFF	; 255
 7fa:	49 ef       	ldi	r20, 0xF9	; 249
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	91 50       	subi	r25, 0x01	; 1
 800:	40 40       	sbci	r20, 0x00	; 0
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <input+0xc6>
 806:	00 c0       	rjmp	.+0      	; 0x808 <input+0xd0>
 808:	00 00       	nop
		{
			_delay_ms(20); 		  		 //for de-bounce
			column_value = KEY_PAD_COLUMN | 0x0F;
 80a:	83 b3       	in	r24, 0x13	; 19
 80c:	8f 60       	ori	r24, 0x0F	; 15
			if(column_value == 0xFF) goto OUT;
 80e:	8f 3f       	cpi	r24, 0xFF	; 255
 810:	09 f4       	brne	.+2      	; 0x814 <input+0xdc>
 812:	0f c2       	rjmp	.+1054   	; 0xc32 <input+0x4fa>
			
			keyCode = (column_value & 0xF0) | (0x0F & ~(0x01 << i));
 814:	20 95       	com	r18
 816:	2f 70       	andi	r18, 0x0F	; 15
 818:	80 7f       	andi	r24, 0xF0	; 240
 81a:	28 2b       	or	r18, r24
			
			while (column_value != 0xFF)
			column_value = KEY_PAD_COLUMN | 0x0F;
 81c:	83 b3       	in	r24, 0x13	; 19
 81e:	8f 60       	ori	r24, 0x0F	; 15
			column_value = KEY_PAD_COLUMN | 0x0F;
			if(column_value == 0xFF) goto OUT;
			
			keyCode = (column_value & 0xF0) | (0x0F & ~(0x01 << i));
			
			while (column_value != 0xFF)
 820:	8f 3f       	cpi	r24, 0xFF	; 255
 822:	e1 f7       	brne	.-8      	; 0x81c <input+0xe4>
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	39 ef       	ldi	r19, 0xF9	; 249
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	30 40       	sbci	r19, 0x00	; 0
 82e:	40 40       	sbci	r20, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <input+0xf2>
 832:	00 c0       	rjmp	.+0      	; 0x834 <input+0xfc>
 834:	00 00       	nop
			column_value = KEY_PAD_COLUMN | 0x0F;
			
			_delay_ms(20);   			   //for de-bounce
			
			switch (keyCode)
 836:	2e 3b       	cpi	r18, 0xBE	; 190
 838:	89 f1       	breq	.+98     	; 0x89c <input+0x164>
 83a:	88 f4       	brcc	.+34     	; 0x85e <input+0x126>
 83c:	2e 37       	cpi	r18, 0x7E	; 126
 83e:	b1 f1       	breq	.+108    	; 0x8ac <input+0x174>
 840:	38 f4       	brcc	.+14     	; 0x850 <input+0x118>
 842:	2b 37       	cpi	r18, 0x7B	; 123
 844:	b9 f1       	breq	.+110    	; 0x8b4 <input+0x17c>
 846:	2d 37       	cpi	r18, 0x7D	; 125
 848:	99 f1       	breq	.+102    	; 0x8b0 <input+0x178>
 84a:	27 37       	cpi	r18, 0x77	; 119
 84c:	b9 f5       	brne	.+110    	; 0x8bc <input+0x184>
 84e:	34 c0       	rjmp	.+104    	; 0x8b8 <input+0x180>
 850:	2b 3b       	cpi	r18, 0xBB	; 187
 852:	41 f1       	breq	.+80     	; 0x8a4 <input+0x16c>
 854:	2d 3b       	cpi	r18, 0xBD	; 189
 856:	21 f1       	breq	.+72     	; 0x8a0 <input+0x168>
 858:	27 3b       	cpi	r18, 0xB7	; 183
 85a:	81 f5       	brne	.+96     	; 0x8bc <input+0x184>
 85c:	25 c0       	rjmp	.+74     	; 0x8a8 <input+0x170>
 85e:	2e 3d       	cpi	r18, 0xDE	; 222
 860:	a9 f0       	breq	.+42     	; 0x88c <input+0x154>
 862:	38 f4       	brcc	.+14     	; 0x872 <input+0x13a>
 864:	2b 3d       	cpi	r18, 0xDB	; 219
 866:	b1 f0       	breq	.+44     	; 0x894 <input+0x15c>
 868:	2d 3d       	cpi	r18, 0xDD	; 221
 86a:	91 f0       	breq	.+36     	; 0x890 <input+0x158>
 86c:	27 3d       	cpi	r18, 0xD7	; 215
 86e:	31 f5       	brne	.+76     	; 0x8bc <input+0x184>
 870:	13 c0       	rjmp	.+38     	; 0x898 <input+0x160>
 872:	2b 3e       	cpi	r18, 0xEB	; 235
 874:	09 f4       	brne	.+2      	; 0x878 <input+0x140>
 876:	e5 c1       	rjmp	.+970    	; 0xc42 <input+0x50a>
 878:	18 f4       	brcc	.+6      	; 0x880 <input+0x148>
 87a:	27 3e       	cpi	r18, 0xE7	; 231
 87c:	f9 f4       	brne	.+62     	; 0x8bc <input+0x184>
 87e:	20 c0       	rjmp	.+64     	; 0x8c0 <input+0x188>
 880:	2d 3e       	cpi	r18, 0xED	; 237
 882:	09 f4       	brne	.+2      	; 0x886 <input+0x14e>
 884:	dc c1       	rjmp	.+952    	; 0xc3e <input+0x506>
 886:	2e 3e       	cpi	r18, 0xEE	; 238
 888:	c9 f4       	brne	.+50     	; 0x8bc <input+0x184>
 88a:	34 c0       	rjmp	.+104    	; 0x8f4 <input+0x1bc>
				break;
				case (0xEB): keyPressed = '4';
				break;
				case (0xE7): keyPressed = '1';
				break;
				case (0xDE): keyPressed = '0';
 88c:	18 2d       	mov	r17, r8
				break;
 88e:	33 c0       	rjmp	.+102    	; 0x8f6 <input+0x1be>
				case (0xDD): keyPressed = '8';
 890:	1a 2d       	mov	r17, r10
				break;
 892:	31 c0       	rjmp	.+98     	; 0x8f6 <input+0x1be>
				case (0xDB): keyPressed = '5';
 894:	1d 2d       	mov	r17, r13
				break;
 896:	2f c0       	rjmp	.+94     	; 0x8f6 <input+0x1be>
				case (0xD7): keyPressed = '2';
 898:	12 e3       	ldi	r17, 0x32	; 50
				break;
 89a:	2d c0       	rjmp	.+90     	; 0x8f6 <input+0x1be>
				case (0xBE): keyPressed = '#';
 89c:	13 e2       	ldi	r17, 0x23	; 35
				break;
 89e:	2b c0       	rjmp	.+86     	; 0x8f6 <input+0x1be>
				case (0xBD): keyPressed = '9';
 8a0:	19 2d       	mov	r17, r9
				break;
 8a2:	29 c0       	rjmp	.+82     	; 0x8f6 <input+0x1be>
				case (0xBB): keyPressed = '6';
 8a4:	1c 2d       	mov	r17, r12
				break;
 8a6:	27 c0       	rjmp	.+78     	; 0x8f6 <input+0x1be>
				case (0xB7): keyPressed = '3';
 8a8:	1f 2d       	mov	r17, r15
				break;
 8aa:	25 c0       	rjmp	.+74     	; 0x8f6 <input+0x1be>
				case (0x7E): keyPressed = 'D';
 8ac:	14 e4       	ldi	r17, 0x44	; 68
				break;
 8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <input+0x1be>
				case (0x7D): keyPressed = 'C';
 8b0:	15 2d       	mov	r17, r5
				break;
 8b2:	21 c0       	rjmp	.+66     	; 0x8f6 <input+0x1be>
				case (0x7B): keyPressed = 'B';
 8b4:	16 2d       	mov	r17, r6
				break;
 8b6:	1f c0       	rjmp	.+62     	; 0x8f6 <input+0x1be>
				case (0x77): keyPressed = 'A';
 8b8:	17 2d       	mov	r17, r7
				break;
 8ba:	1d c0       	rjmp	.+58     	; 0x8f6 <input+0x1be>
				default	   : keyPressed = 'X';
 8bc:	18 e5       	ldi	r17, 0x58	; 88
 8be:	1b c0       	rjmp	.+54     	; 0x8f6 <input+0x1be>
			}
			if (keyPressed=='1')
			{
				entered_password[keyPressed_count]='1';
 8c0:	e0 91 17 01 	lds	r30, 0x0117
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	e8 5e       	subi	r30, 0xE8	; 232
 8c8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ca:	81 e3       	ldi	r24, 0x31	; 49
 8cc:	80 83       	st	Z, r24
				LCD_data('1');
 8ce:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				buzzer();
 8d2:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				keyPressed_count++;
 8d6:	80 91 17 01 	lds	r24, 0x0117
 8da:	8f 5f       	subi	r24, 0xFF	; 255
 8dc:	80 93 17 01 	sts	0x0117, r24
				LCD_cmnd(0x10);
 8e0:	80 e1       	ldi	r24, 0x10	; 16
 8e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 8e6:	8a e2       	ldi	r24, 0x2A	; 42
 8e8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 8ec:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 8f0:	11 e3       	ldi	r17, 0x31	; 49
 8f2:	37 c0       	rjmp	.+110    	; 0x962 <input+0x22a>
			
			_delay_ms(20);   			   //for de-bounce
			
			switch (keyCode)
			{
				case (0xEE): keyPressed = '*';
 8f4:	1a e2       	ldi	r17, 0x2A	; 42
				keyPressed_count++;
				LCD_cmnd(0x10);
				LCD_data('*');
				compare_password();
			}
			if (keyPressed=='2')
 8f6:	12 33       	cpi	r17, 0x32	; 50
 8f8:	c9 f4       	brne	.+50     	; 0x92c <input+0x1f4>
			{
				entered_password[keyPressed_count]='2';
 8fa:	e0 91 17 01 	lds	r30, 0x0117
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	e8 5e       	subi	r30, 0xE8	; 232
 902:	fe 4f       	sbci	r31, 0xFE	; 254
 904:	82 e3       	ldi	r24, 0x32	; 50
 906:	80 83       	st	Z, r24
				LCD_data('2');
 908:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 90c:	80 91 17 01 	lds	r24, 0x0117
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 916:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 91a:	80 e1       	ldi	r24, 0x10	; 16
 91c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 920:	8a e2       	ldi	r24, 0x2A	; 42
 922:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 926:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 92a:	36 c0       	rjmp	.+108    	; 0x998 <input+0x260>
			}
			if (keyPressed=='3')
 92c:	13 33       	cpi	r17, 0x33	; 51
 92e:	c9 f4       	brne	.+50     	; 0x962 <input+0x22a>
			{
				entered_password[keyPressed_count]='3';
 930:	e0 91 17 01 	lds	r30, 0x0117
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	e8 5e       	subi	r30, 0xE8	; 232
 938:	fe 4f       	sbci	r31, 0xFE	; 254
 93a:	f0 82       	st	Z, r15
				LCD_data('3');
 93c:	8f 2d       	mov	r24, r15
 93e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 942:	80 91 17 01 	lds	r24, 0x0117
 946:	8f 5f       	subi	r24, 0xFF	; 255
 948:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 94c:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 950:	80 e1       	ldi	r24, 0x10	; 16
 952:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 956:	8a e2       	ldi	r24, 0x2A	; 42
 958:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 95c:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 960:	36 c0       	rjmp	.+108    	; 0x9ce <input+0x296>
			}
			if (keyPressed=='4')
 962:	14 33       	cpi	r17, 0x34	; 52
 964:	c9 f4       	brne	.+50     	; 0x998 <input+0x260>
			{
				entered_password[keyPressed_count]='4';
 966:	e0 91 17 01 	lds	r30, 0x0117
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	e8 5e       	subi	r30, 0xE8	; 232
 96e:	fe 4f       	sbci	r31, 0xFE	; 254
 970:	e0 82       	st	Z, r14
				LCD_data('4');
 972:	8e 2d       	mov	r24, r14
 974:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 978:	80 91 17 01 	lds	r24, 0x0117
 97c:	8f 5f       	subi	r24, 0xFF	; 255
 97e:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 982:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 986:	80 e1       	ldi	r24, 0x10	; 16
 988:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 98c:	8a e2       	ldi	r24, 0x2A	; 42
 98e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 992:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 996:	36 c0       	rjmp	.+108    	; 0xa04 <input+0x2cc>
			}
			if (keyPressed=='5')
 998:	15 33       	cpi	r17, 0x35	; 53
 99a:	c9 f4       	brne	.+50     	; 0x9ce <input+0x296>
			{
				entered_password[keyPressed_count]='5';
 99c:	e0 91 17 01 	lds	r30, 0x0117
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	e8 5e       	subi	r30, 0xE8	; 232
 9a4:	fe 4f       	sbci	r31, 0xFE	; 254
 9a6:	d0 82       	st	Z, r13
				LCD_data('5');
 9a8:	8d 2d       	mov	r24, r13
 9aa:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 9ae:	80 91 17 01 	lds	r24, 0x0117
 9b2:	8f 5f       	subi	r24, 0xFF	; 255
 9b4:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 9b8:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 9bc:	80 e1       	ldi	r24, 0x10	; 16
 9be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 9c2:	8a e2       	ldi	r24, 0x2A	; 42
 9c4:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 9c8:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 9cc:	36 c0       	rjmp	.+108    	; 0xa3a <input+0x302>
			}
			if (keyPressed=='6')
 9ce:	16 33       	cpi	r17, 0x36	; 54
 9d0:	c9 f4       	brne	.+50     	; 0xa04 <input+0x2cc>
			{
				entered_password[keyPressed_count]='6';
 9d2:	e0 91 17 01 	lds	r30, 0x0117
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	e8 5e       	subi	r30, 0xE8	; 232
 9da:	fe 4f       	sbci	r31, 0xFE	; 254
 9dc:	c0 82       	st	Z, r12
				LCD_data('6');
 9de:	8c 2d       	mov	r24, r12
 9e0:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 9e4:	80 91 17 01 	lds	r24, 0x0117
 9e8:	8f 5f       	subi	r24, 0xFF	; 255
 9ea:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 9ee:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 9f2:	80 e1       	ldi	r24, 0x10	; 16
 9f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 9f8:	8a e2       	ldi	r24, 0x2A	; 42
 9fa:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 9fe:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 a02:	36 c0       	rjmp	.+108    	; 0xa70 <input+0x338>
			}
			if (keyPressed=='7')
 a04:	17 33       	cpi	r17, 0x37	; 55
 a06:	c9 f4       	brne	.+50     	; 0xa3a <input+0x302>
			{
				entered_password[keyPressed_count]='7';
 a08:	e0 91 17 01 	lds	r30, 0x0117
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	e8 5e       	subi	r30, 0xE8	; 232
 a10:	fe 4f       	sbci	r31, 0xFE	; 254
 a12:	b0 82       	st	Z, r11
				LCD_data('7');
 a14:	8b 2d       	mov	r24, r11
 a16:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 a1a:	80 91 17 01 	lds	r24, 0x0117
 a1e:	8f 5f       	subi	r24, 0xFF	; 255
 a20:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 a24:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 a28:	80 e1       	ldi	r24, 0x10	; 16
 a2a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 a2e:	8a e2       	ldi	r24, 0x2A	; 42
 a30:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 a34:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 a38:	36 c0       	rjmp	.+108    	; 0xaa6 <input+0x36e>
			}
			if (keyPressed=='8')
 a3a:	18 33       	cpi	r17, 0x38	; 56
 a3c:	c9 f4       	brne	.+50     	; 0xa70 <input+0x338>
			{
				entered_password[keyPressed_count]='8';
 a3e:	e0 91 17 01 	lds	r30, 0x0117
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	e8 5e       	subi	r30, 0xE8	; 232
 a46:	fe 4f       	sbci	r31, 0xFE	; 254
 a48:	a0 82       	st	Z, r10
				LCD_data('8');
 a4a:	8a 2d       	mov	r24, r10
 a4c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 a50:	80 91 17 01 	lds	r24, 0x0117
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 a5a:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 a5e:	80 e1       	ldi	r24, 0x10	; 16
 a60:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 a64:	8a e2       	ldi	r24, 0x2A	; 42
 a66:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 a6a:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 a6e:	36 c0       	rjmp	.+108    	; 0xadc <input+0x3a4>
			}
			if (keyPressed=='9')
 a70:	19 33       	cpi	r17, 0x39	; 57
 a72:	c9 f4       	brne	.+50     	; 0xaa6 <input+0x36e>
			{
				entered_password[keyPressed_count]='9';
 a74:	e0 91 17 01 	lds	r30, 0x0117
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	e8 5e       	subi	r30, 0xE8	; 232
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	90 82       	st	Z, r9
				LCD_data('9');
 a80:	89 2d       	mov	r24, r9
 a82:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 a86:	80 91 17 01 	lds	r24, 0x0117
 a8a:	8f 5f       	subi	r24, 0xFF	; 255
 a8c:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 a90:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 a94:	80 e1       	ldi	r24, 0x10	; 16
 a96:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 a9a:	8a e2       	ldi	r24, 0x2A	; 42
 a9c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 aa0:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 aa4:	36 c0       	rjmp	.+108    	; 0xb12 <input+0x3da>
			}
			if (keyPressed=='0')
 aa6:	10 33       	cpi	r17, 0x30	; 48
 aa8:	c9 f4       	brne	.+50     	; 0xadc <input+0x3a4>
			{
				entered_password[keyPressed_count]='0';
 aaa:	e0 91 17 01 	lds	r30, 0x0117
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	e8 5e       	subi	r30, 0xE8	; 232
 ab2:	fe 4f       	sbci	r31, 0xFE	; 254
 ab4:	80 82       	st	Z, r8
				LCD_data('0');
 ab6:	88 2d       	mov	r24, r8
 ab8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 abc:	80 91 17 01 	lds	r24, 0x0117
 ac0:	8f 5f       	subi	r24, 0xFF	; 255
 ac2:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 ac6:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 aca:	80 e1       	ldi	r24, 0x10	; 16
 acc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 ad0:	8a e2       	ldi	r24, 0x2A	; 42
 ad2:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 ad6:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 ada:	36 c0       	rjmp	.+108    	; 0xb48 <input+0x410>
			}
			if (keyPressed=='A')
 adc:	11 34       	cpi	r17, 0x41	; 65
 ade:	c9 f4       	brne	.+50     	; 0xb12 <input+0x3da>
			{
				entered_password[keyPressed_count]='A';
 ae0:	e0 91 17 01 	lds	r30, 0x0117
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	e8 5e       	subi	r30, 0xE8	; 232
 ae8:	fe 4f       	sbci	r31, 0xFE	; 254
 aea:	70 82       	st	Z, r7
				LCD_data('A');
 aec:	87 2d       	mov	r24, r7
 aee:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 af2:	80 91 17 01 	lds	r24, 0x0117
 af6:	8f 5f       	subi	r24, 0xFF	; 255
 af8:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 afc:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 b00:	80 e1       	ldi	r24, 0x10	; 16
 b02:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 b06:	8a e2       	ldi	r24, 0x2A	; 42
 b08:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 b0c:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 b10:	36 c0       	rjmp	.+108    	; 0xb7e <input+0x446>
			}
			if (keyPressed=='B')
 b12:	12 34       	cpi	r17, 0x42	; 66
 b14:	c9 f4       	brne	.+50     	; 0xb48 <input+0x410>
			{
				entered_password[keyPressed_count]='B';
 b16:	e0 91 17 01 	lds	r30, 0x0117
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	e8 5e       	subi	r30, 0xE8	; 232
 b1e:	fe 4f       	sbci	r31, 0xFE	; 254
 b20:	60 82       	st	Z, r6
				LCD_data('B');
 b22:	86 2d       	mov	r24, r6
 b24:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 b28:	80 91 17 01 	lds	r24, 0x0117
 b2c:	8f 5f       	subi	r24, 0xFF	; 255
 b2e:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 b32:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 b36:	80 e1       	ldi	r24, 0x10	; 16
 b38:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 b3c:	8a e2       	ldi	r24, 0x2A	; 42
 b3e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 b42:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 b46:	50 c0       	rjmp	.+160    	; 0xbe8 <input+0x4b0>
			}
			if (keyPressed=='C')
 b48:	13 34       	cpi	r17, 0x43	; 67
 b4a:	c9 f4       	brne	.+50     	; 0xb7e <input+0x446>
			{
				entered_password[keyPressed_count]='C';
 b4c:	e0 91 17 01 	lds	r30, 0x0117
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	e8 5e       	subi	r30, 0xE8	; 232
 b54:	fe 4f       	sbci	r31, 0xFE	; 254
 b56:	50 82       	st	Z, r5
				LCD_data('C');
 b58:	85 2d       	mov	r24, r5
 b5a:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				keyPressed_count++;
 b5e:	80 91 17 01 	lds	r24, 0x0117
 b62:	8f 5f       	subi	r24, 0xFF	; 255
 b64:	80 93 17 01 	sts	0x0117, r24
				buzzer();
 b68:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
				LCD_cmnd(0x10);
 b6c:	80 e1       	ldi	r24, 0x10	; 16
 b6e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
				LCD_data('*');
 b72:	8a e2       	ldi	r24, 0x2A	; 42
 b74:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_data>
				compare_password();
 b78:	0e 94 c2 02 	call	0x584	; 0x584 <compare_password>
 b7c:	5a c0       	rjmp	.+180    	; 0xc32 <input+0x4fa>
			}
			if (keyPressed=='D')
 b7e:	14 34       	cpi	r17, 0x44	; 68
 b80:	f9 f4       	brne	.+62     	; 0xbc0 <input+0x488>
			{
				LCD_clear();
 b82:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
				LCD_print("T0 CHANGE THE");
 b86:	8f ee       	ldi	r24, 0xEF	; 239
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
				LCD_set_curser(2,3);
 b8e:	63 e0       	ldi	r22, 0x03	; 3
 b90:	82 e0       	ldi	r24, 0x02	; 2
 b92:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
				LCD_print("Password");					
 b96:	89 ed       	ldi	r24, 0xD9	; 217
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	99 e6       	ldi	r25, 0x69	; 105
 ba2:	28 e1       	ldi	r18, 0x18	; 24
 ba4:	81 50       	subi	r24, 0x01	; 1
 ba6:	90 40       	sbci	r25, 0x00	; 0
 ba8:	20 40       	sbci	r18, 0x00	; 0
 baa:	e1 f7       	brne	.-8      	; 0xba4 <input+0x46c>
 bac:	00 c0       	rjmp	.+0      	; 0xbae <input+0x476>
 bae:	00 00       	nop
				_delay_ms(500);
				OK=1;					
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	80 93 60 00 	sts	0x0060, r24
				chage_password_value=4;
 bb6:	84 e0       	ldi	r24, 0x04	; 4
 bb8:	80 93 06 01 	sts	0x0106, r24
				main();
 bbc:	0e 94 ac 01 	call	0x358	; 0x358 <main>
			}
			if (keyPressed=='#')
 bc0:	13 32       	cpi	r17, 0x23	; 35
 bc2:	91 f4       	brne	.+36     	; 0xbe8 <input+0x4b0>
			{
				if(keyPressed_count!=0)
 bc4:	80 91 17 01 	lds	r24, 0x0117
 bc8:	88 23       	and	r24, r24
 bca:	99 f1       	breq	.+102    	; 0xc32 <input+0x4fa>
				{
					buzzer();
 bcc:	0e 94 c2 00 	call	0x184	; 0x184 <buzzer>
					LCD_cmnd(0x0E);
 bd0:	8e e0       	ldi	r24, 0x0E	; 14
 bd2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
					LCD_cmnd(0x10);
 bd6:	80 e1       	ldi	r24, 0x10	; 16
 bd8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmnd>
					keyPressed_count--;
 bdc:	80 91 17 01 	lds	r24, 0x0117
 be0:	81 50       	subi	r24, 0x01	; 1
 be2:	80 93 17 01 	sts	0x0117, r24
 be6:	25 c0       	rjmp	.+74     	; 0xc32 <input+0x4fa>
				}
			}
			if (keyPressed=='*')
 be8:	1a 32       	cpi	r17, 0x2A	; 42
 bea:	19 f5       	brne	.+70     	; 0xc32 <input+0x4fa>
			{
				if( keyPressed_count!=0 && abc!=1 )
 bec:	80 91 17 01 	lds	r24, 0x0117
 bf0:	88 23       	and	r24, r24
 bf2:	f9 f0       	breq	.+62     	; 0xc32 <input+0x4fa>
 bf4:	80 91 02 01 	lds	r24, 0x0102
 bf8:	81 30       	cpi	r24, 0x01	; 1
 bfa:	d9 f0       	breq	.+54     	; 0xc32 <input+0x4fa>
				{
					LCD_clear();
 bfc:	0e 94 89 00 	call	0x112	; 0x112 <LCD_clear>
					LCD_set_curser(1,7);
 c00:	67 e0       	ldi	r22, 0x07	; 7
 c02:	81 e0       	ldi	r24, 0x01	; 1
 c04:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_set_curser>
					LCD_print("OK");
 c08:	8d ef       	ldi	r24, 0xFD	; 253
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 93 00 	call	0x126	; 0x126 <LCD_print>
					PORTB|=0x30;
 c10:	88 b3       	in	r24, 0x18	; 24
 c12:	80 63       	ori	r24, 0x30	; 48
 c14:	88 bb       	out	0x18, r24	; 24
 c16:	3f ef       	ldi	r19, 0xFF	; 255
 c18:	45 ea       	ldi	r20, 0xA5	; 165
 c1a:	8e e0       	ldi	r24, 0x0E	; 14
 c1c:	31 50       	subi	r19, 0x01	; 1
 c1e:	40 40       	sbci	r20, 0x00	; 0
 c20:	80 40       	sbci	r24, 0x00	; 0
 c22:	e1 f7       	brne	.-8      	; 0xc1c <input+0x4e4>
 c24:	00 c0       	rjmp	.+0      	; 0xc26 <input+0x4ee>
 c26:	00 00       	nop
					_delay_ms(300);
					PORTB&=0x07;
 c28:	88 b3       	in	r24, 0x18	; 24
 c2a:	87 70       	andi	r24, 0x07	; 7
 c2c:	88 bb       	out	0x18, r24	; 24
					OK=2;
 c2e:	40 92 60 00 	sts	0x0060, r4
 c32:	21 96       	adiw	r28, 0x01	; 1
}
void input()
{
	unsigned char i,column_value,keyCode,keyPressed=0;
	column_value = 0xFF;
	for(i=0; i<4; i++)
 c34:	c4 30       	cpi	r28, 0x04	; 4
 c36:	d1 05       	cpc	r29, r1
 c38:	09 f0       	breq	.+2      	; 0xc3c <input+0x504>
 c3a:	c3 cd       	rjmp	.-1146   	; 0x7c2 <input+0x8a>
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <input+0x50e>
			
			switch (keyCode)
			{
				case (0xEE): keyPressed = '*';
				break;
				case (0xED): keyPressed = '7';
 c3e:	1b 2d       	mov	r17, r11
 c40:	5a ce       	rjmp	.-844    	; 0x8f6 <input+0x1be>
				break;
				case (0xEB): keyPressed = '4';
 c42:	1e 2d       	mov	r17, r14
 c44:	58 ce       	rjmp	.-848    	; 0x8f6 <input+0x1be>
				}
			}
		}
		OUT:;
	}
}
 c46:	df 91       	pop	r29
 c48:	cf 91       	pop	r28
 c4a:	1f 91       	pop	r17
 c4c:	ff 90       	pop	r15
 c4e:	ef 90       	pop	r14
 c50:	df 90       	pop	r13
 c52:	cf 90       	pop	r12
 c54:	bf 90       	pop	r11
 c56:	af 90       	pop	r10
 c58:	9f 90       	pop	r9
 c5a:	8f 90       	pop	r8
 c5c:	7f 90       	pop	r7
 c5e:	6f 90       	pop	r6
 c60:	5f 90       	pop	r5
 c62:	4f 90       	pop	r4
 c64:	3f 90       	pop	r3
 c66:	2f 90       	pop	r2
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
